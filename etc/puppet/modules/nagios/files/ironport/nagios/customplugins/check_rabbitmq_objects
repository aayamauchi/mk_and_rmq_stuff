#!/usr/bin/env perl
#
# check_rabbitmq_objects
#
# Use the management APIs to count various server objects -
# vhost, exchange, binding, queue, channel
#
use strict;
use warnings;

use Nagios::Plugin ;
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);

my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management to count various objects.',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 55672
);

$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options


##############################################################################
# check stuff.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;

my $ua = LWP::UserAgent->new(env_proxy => $p->opts->proxy);
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
# Different security domains in 2.5 and 2.6
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $p->opts->username, $p->opts->password);
$ua->credentials("$hostname:$port",
    "Management: Web UI", $p->opts->username, $p->opts->password);

my @calls = ("vhost", "exchange", "binding", "queue", "channel");
for my $call (@calls) {
    my $url = sprintf("http%s://%s:%d/api/%ss", ($p->opts->ssl ? "s" : ""), $hostname, $port, $call);
    my ($code, $result) = request($url);
    if ($code != 200) {
        $p->nagios_exit(CRITICAL, "$result : /api/". $call."s");
    }
    # we're always returned a list - count it
    my $count = $#{$result};
    $count = 0 if $count == -1;
    $p->add_message(OK, sprintf("$call (%.2f%%)", $count)) ;
    $p->add_perfdata(label=>$call, value => $count);

}

$p->nagios_exit(return_code => OK, message => "Gathered Object Counts");

sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

1;
