#!/usr/bin/env perl

###  check_rabbitmq_partition

# Use the management API to check if partitions error conditions exist.

# baseed on check_rabbitmq_watermark.pl,
# Originally by Nathan Vonnahme, n8v at users dot sourceforge
# dot net, July 19 2006

##############################################################################
# prologue
use strict;
use warnings;

use Nagios::Plugin ;
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);


# Instantiate Nagios::Plugin object (the 'usage' parameter is mandatory)
my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to check if the mem_alarm has been triggered',
);

$p->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 55672
);
$p->add_arg(spec => 'node|n=s',
    help => "Specify the node name (default is hostname)"
);
$p->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options


##############################################################################
# check stuff.

my $hostname=$p->opts->hostname;
my $port=$p->opts->port;

my $nodename = $p->opts->node;

if (!$nodename) {
    $hostname =~ /^([a-zA-Z0-9-]*)/;
    $nodename = $1;
}

my $url = sprintf("http%s://%s:%d/api/nodes/rabbit\@%s", ($p->opts->ssl ? "s" : ""), $hostname, $port, $nodename);

my $ua = LWP::UserAgent->new(env_proxy => $p->opts->proxy);
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
# Different security domains in 2.5 and 2.6
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $p->opts->username, $p->opts->password);
$ua->credentials("$hostname:$port",
    "Management: Web UI", $p->opts->username, $p->opts->password);
my $req = HTTP::Request->new(GET => $url);
my $res = $ua->request($req);

if (!$res->is_success) {
    # Deal with standard error conditions - make the messages more sensible
    if ($res->code == 400) {
        my $bodyref = decode_json $res->content;
        $p->nagios_exit(CRITICAL, $bodyref->{'reason'});
    }
    $res->code == 404 and $p->nagios_die("Not found");
    $res->code == 401 and $p->nagios_die("Access refused");
    if ($res->code < 200 or $res->code > 400 ) {
        $p->nagios_exit(CRITICAL, "Received ".$res->status_line);
    }
}
my $bodyref = decode_json $res->content;

my $partitions=$bodyref->{'partitions'};
ref($partitions) eq "ARRAY" or $p->nagios_exit(CRITICAL, $res->content);
scalar(@$partitions)==0 or $p->nagios_exit(CRITICAL, "Partitions detected: @$partitions");

my($code, $message) = (OK, "No Partitions");
$p->nagios_exit(
    return_code => $code,
    message => $message
);

1;
